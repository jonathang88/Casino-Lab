#!/usr/bin/env python3
# Educational template for symbolic analysis of a binary using angr.
# This script is illustrative and may require setup (angr) to work.
import angr, claripy, sys
def solve(binary):
    proj = angr.Project(binary, auto_load_libs=False)
    pwd = claripy.BVS('p', 8*30)
    st = proj.factory.entry_state(stdin=pwd)
    sim = proj.factory.simulation_manager(st)
    sim.explore(find=lambda s: b"Correct pass" in s.posix.dumps(1))
    if sim.found:
        sol = sim.found[0].solver.eval(pwd, cast_to=bytes)
        print(sol.split(b'\x00')[0].decode())
    else:
        print("Not found")
if __name__ == '__main__':
    if len(sys.argv)!=2:
        print("Usage: pass_cracker.py <binary>")
    else:
        solve(sys.argv[1])
